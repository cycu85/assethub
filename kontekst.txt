# KONTEKS APLIKACJI ASSETHUB - PRZEWODNIK DLA GENERATORÓW AI

## ARCHITEKTURA I KONWENCJE

### Struktura aplikacji
- **Framework**: Symfony 7.0 + PHP 8.2+
- **Baza danych**: MySQL/MariaDB z Doctrine ORM
- **Frontend**: Bootstrap 5.3 + Twig templates + vanilla JavaScript
- **Autoryzacja**: Custom role-based system z modułami
- **Logowanie**: Monolog z wieloma kanałami

### Konwencje nazewnictwa
- **Kontrolery**: `{Module}Controller` (np. EquipmentController)
- **Encje**: Singular form (User, Equipment, Module)
- **Repozytoria**: `{Entity}Repository`
- **Formularze**: `{Purpose}Type` (np. EquipmentCreateType)
- **Usługi**: `{Purpose}Service` (np. PermissionService)
- **Szablony**: `{module}/{action}.html.twig`

## SYSTEM MODUŁOWY

### Jak działa system modułów
1. Każdy moduł ma wpis w tabeli `modules` (nazwa, opis, czy aktywny)
2. Role są przypisane do modułów w tabeli `roles`
3. Użytkownicy mają role przez tabelę `user_roles`
4. Każdy kontroler sprawdza uprawnienia przez `PermissionService`

### Dodawanie nowego modułu - CHECKLIST:

#### 1. BAZA DANYCH
```sql
-- Dodaj moduł do tabeli modules
INSERT INTO modules (name, display_name, description, is_active, sort_order) 
VALUES ('new_module', 'Nowy Moduł', 'Opis nowego modułu', 1, 100);

-- Dodaj podstawowe role
INSERT INTO roles (name, display_name, description, permissions, module_id) VALUES
('NEW_MODULE_ADMIN', 'Administrator Nowego Modułu', 'Pełny dostęp', 'VIEW,CREATE,EDIT,DELETE', (SELECT id FROM modules WHERE name = 'new_module')),
('NEW_MODULE_USER', 'Użytkownik Nowego Modułu', 'Tylko podgląd', 'VIEW', (SELECT id FROM modules WHERE name = 'new_module'));
```

#### 2. ENCJE (src/Entity/)
- Dodaj `createdAt`, `updatedAt` dla auditowania
- Dodaj relacje do `User` (created_by, updated_by)
- Użyj Doctrine annotations/attributes
- Dodaj indeksy dla często wyszukiwanych pól

#### 3. REPOZYTORIA (src/Repository/)
- Rozszerz `ServiceEntityRepository`
- Dodaj metodę `save($entity, bool $flush = false)`
- Dodaj metody wyszukiwania specyficzne dla modułu

#### 4. KONTROLERY (src/Controller/)
- Użyj `#[Route('/module-path')]` na klasie
- ZAWSZE sprawdź uprawnienia przez `PermissionService`
- ZAWSZE loguj operacje przez `LoggerInterface`
- Użyj Flash messages dla informacji zwrotnych

#### 5. FORMULARZE (src/Form/)
- Użyj Bootstrap classes: `form-control`, `form-select`
- Dodaj walidację Symfony Constraints
- Użyj `required: false` dla opcjonalnych pól

#### 6. USŁUGI (src/Service/)
- Logika biznesowa oddzielona od kontrolerów
- Używaj dependency injection
- Loguj wszystkie ważne operacje

#### 7. SZABLONY (templates/)
```
templates/
├── module_name/
│   ├── index.html.twig
│   ├── show.html.twig
│   ├── edit.html.twig
│   └── _form.html.twig
```

#### 8. NAVIGATION (templates/partials/sidebar.html.twig)
```twig
{% if is_granted_module('module_name') %}
<li class="nav-item">
    <a class="nav-link menu-link" href="{{ path('module_index') }}">
        <i class="ri-icon-name"></i>
        <span>Nazwa Modułu</span>
    </a>
</li>
{% endif %}
```

## SYSTEM LOGOWANIA

### OBOWIĄZKOWE LOGOWANIE
Każdy kontroler MUSI logować:
```php
// Dostęp do modułu
$this->logger->info('Module accessed', [
    'module' => 'module_name',
    'user' => $user->getUsername(),
    'ip' => $this->getClientIp()
]);

// Operacje CRUD
$this->logger->info('Entity created/updated/deleted', [
    'entity' => 'EntityName',
    'id' => $entity->getId(),
    'user' => $user->getUsername(),
    'ip' => $this->getClientIp()
]);

// Błędy i ostrzeżenia
$this->logger->error('Operation failed', [
    'operation' => 'operation_name',
    'error' => $e->getMessage(),
    'user' => $user->getUsername(),
    'ip' => $this->getClientIp()
]);
```

### Kanały logowania
- `app` - główne operacje aplikacji
- `security` - bezpieczeństwo i uwierzytelnianie
- `equipment` - operacje na sprzęcie
- `dictionary` - operacje na słownikach
- `{module_name}` - dedykowany kanał dla modułu

## SYSTEM UPRAWNIEŃ

### Sprawdzanie uprawnień
```php
// W kontrolerze - ZAWSZE na początku akcji
if (!$this->permissionService->hasPermission($user, 'module_name', 'PERMISSION_NAME')) {
    $this->logger->warning('Unauthorized access attempt', [
        'module' => 'module_name',
        'user' => $user?->getUsername() ?? 'anonymous',
        'ip' => $request->getClientIp()
    ]);
    return $this->redirectToRoute('error_access_denied');
}

// W szablonach - sprawdzanie ról w module admin
{% set userModules = get_user_modules() %}
{% set hasSystemAdmin = false %}
{% set hasEmployeesRole = false %}

{% for userRole in userModules %}
    {% set module = userRole.role.module %}
    
    {% if module.name == 'admin' and userRole.role.name == 'system_admin' %}
        {% set hasSystemAdmin = true %}
    {% elseif module.name == 'admin' and userRole.role.name in ['employees_viewer', 'employees_editor', 'employees_manager'] %}
        {% set hasEmployeesRole = true %}
    {% endif %}
{% endfor %}

{# Panel administracyjny dla system_admin #}
{% if hasSystemAdmin %}
    <!-- admin panel content -->
{% endif %}

{# Menu Pracownicy dla system_admin lub ról employees #}
{% if hasSystemAdmin or hasEmployeesRole %}
    <!-- employees menu -->
{% endif %}
```

### Typy uprawnień w module admin
- **system_admin** - pełny dostęp do panelu administracyjnego
- **employees_viewer** - `EMPLOYEES_VIEW` - tylko podgląd pracowników
- **employees_editor** - `EMPLOYEES_EDIT_BASIC` - edycja podstawowych danych pracowników
- **employees_manager** - `EMPLOYEES_EDIT_FULL` - pełne zarządzanie pracownikami (tworzenie, usuwanie, role)

### Kontrola dostępu w kontrolerach pracowników
```php
// Podgląd pracowników - wystarczy jeden z trzech uprawnień
if (!$this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_VIEW') && 
    !$this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_BASIC') && 
    !$this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_FULL')) {
    return $this->redirectToRoute('error_access_denied');
}

// Edycja pracowników - wystarczy jedno z dwóch uprawnień edycji
if (!$this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_BASIC') && 
    !$this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_FULL')) {
    return $this->redirectToRoute('error_access_denied');
}

// Pełne zarządzanie - tylko EMPLOYEES_EDIT_FULL
if (!$this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_FULL')) {
    return $this->redirectToRoute('error_access_denied');
}

// Przekazywanie uprawnień do szablonu
$canEdit = $this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_BASIC') || 
           $this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_FULL');
$canEditFull = $this->permissionService->hasPermission($user, 'admin', 'EMPLOYEES_EDIT_FULL');

return $this->render('template.html.twig', [
    'can_edit' => $canEdit,
    'can_edit_full' => $canEditFull,
]);
```

## BAZA DANYCH - FIXTURES

### Aktualizacja fixtures (src/DataFixtures/)
Przy dodawaniu nowego modułu ZAWSZE zaktualizuj:

1. **ModuleFixtures.php** - dodaj nowy moduł
2. **RoleFixtures.php** - dodaj role dla modułu  
3. **UserRoleFixtures.php** - przypisz role użytkownikom
4. **{Module}Fixtures.php** - przykładowe dane dla modułu

## FRONTEND

### Bootstrap 5.3 classes
- Cards: `card`, `card-header`, `card-body`
- Forms: `form-control`, `form-select`, `form-check-input`
- Buttons: `btn btn-primary`, `btn btn-outline-secondary`
- Tables: `table table-striped table-hover`
- Alerts: `alert alert-success/danger/warning/info`

### JavaScript
- Używaj vanilla JavaScript (bez jQuery)
- Umieść w `{% block javascripts %}`
- Używaj `DOMContentLoaded` event listener

### Ikony
- Remix Icons: `ri-{name}-line` lub `ri-{name}-fill`
- Przykłady: `ri-settings-line`, `ri-user-line`, `ri-delete-bin-line`

## BEZPIECZEŃSTWO

### CSRF Protection
- Formularze automatycznie chronione przez Symfony
- API endpoints używają tokenów

### Walidacja danych
- Używaj Symfony Constraints w formularzach
- Waliduj również w encjach
- Sanityzuj dane wejściowe

### Logowanie błędów bezpieczeństwa
```php
$this->logger->warning('Security violation', [
    'type' => 'unauthorized_access',
    'user' => $user?->getUsername() ?? 'anonymous',
    'ip' => $this->getClientIp(),
    'attempted_resource' => 'resource_name'
]);
```

## MIGRACJE

### Przy dodawaniu nowego modułu
```bash
# Utwórz migrację
php bin/console make:migration

# Sprawdź migrację
php bin/console doctrine:migrations:migrate --dry-run

# Wykonaj migrację
php bin/console doctrine:migrations:migrate
```

## TESTY

### Struktura testów
```
tests/
├── Controller/
│   └── {Module}ControllerTest.php
├── Entity/
│   └── {Entity}Test.php
└── Service/
    └── {Service}Test.php
```

## PRZYKŁAD KOMPLETNEGO MODUŁU

### 1. Encja (src/Entity/Example.php)
```php
#[ORM\Entity(repositoryClass: ExampleRepository::class)]
class Example
{
    #[ORM\Id, ORM\GeneratedValue, ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column(type: Types::DATETIME_IMMUTABLE)]
    private ?\DateTimeImmutable $createdAt = null;

    #[ORM\ManyToOne]
    private ?User $createdBy = null;

    // getters, setters...
}
```

### 2. Kontroler (src/Controller/ExampleController.php)
```php
#[Route('/example')]
class ExampleController extends AbstractController
{
    public function __construct(
        private PermissionService $permissionService,
        private LoggerInterface $logger
    ) {}

    #[Route('/', name: 'example_index')]
    public function index(): Response
    {
        $user = $this->getUser();
        
        if (!$this->permissionService->canAccessModule($user, 'example')) {
            $this->logger->warning('Unauthorized example access', [
                'user' => $user?->getUsername() ?? 'anonymous',
                'ip' => $this->getClientIp()
            ]);
            throw $this->createAccessDeniedException();
        }

        $this->logger->info('Example module accessed', [
            'user' => $user->getUsername(),
            'ip' => $this->getClientIp()
        ]);

        return $this->render('example/index.html.twig');
    }
}
```

## INSTALATOR - AKTUALIZACJA

### Przy dodawaniu modułu zaktualizuj:
1. **InstallController.php** - dodaj moduł do kreatora
2. **install/step3.html.twig** - opcja instalacji przykładowych danych
3. **{Module}Fixtures.php** - przykładowe dane dla kreatora

## KONFIGURACJA SYSTEMU

### Dodaj ustawienia do SettingService jeśli moduł wymaga konfiguracji
```php
$this->settingService->set('module_setting', 'value', 'module', 'type', 'description');
```

### System dynamicznego CSS (DynamicCssController)
```php
// Pobieranie ustawień kolorów
$primaryColor = $this->settingService->get('primary_color', '#405189');
$sidebarBgColor = $this->settingService->get('sidebar_bg_color', '#2a3042');
$sidebarTextColor = $this->settingService->get('sidebar_text_color', '#ffffff');
$sidebarActiveColor = $this->settingService->get('sidebar_active_color', '#405189');

// Generowanie CSS z ETag caching
$etag = md5($primaryColor . $sidebarBgColor . $sidebarTextColor . $sidebarActiveColor);
$response->setEtag($etag);
$response->setMaxAge(60); // 1 minuta cache
```

#### CSS Variables + Direct Selectors Pattern
```css
/* Podwójne podejście dla kompatybilności */
:root, :root[data-sidebar=light], :root[data-sidebar=dark] {
    --vz-vertical-menu-item-color: {$sidebarTextColor} !important;
    --vz-vertical-menu-item-active-color: {$sidebarTextColor} !important;
}

/* Direct selectors dla wysokiej specyficzności */
.navbar-menu .navbar-nav .nav-link.active {
    background-color: {$sidebarActiveColor} !important;
    color: {$sidebarTextColor} !important;
}
```

## SŁOWNIKI SYSTEMOWE

### Jeśli moduł używa słowników, dodaj typy do DictionaryFixtures:
```php
$categoryType = new Dictionary();
$categoryType->setType('example_categories');
$categoryType->setKey('active');
$categoryType->setValue('Aktywny');
```

## SYSTEM PROFILI UŻYTKOWNIKÓW

### Funkcjonalności profili
- **Edycja danych osobowych** - imię, nazwisko, email, telefon, stanowisko, dział, oddział
- **Zmiana hasła** - dla użytkowników lokalnych (nie LDAP)
- **Upload avatarów** - JPG, PNG, GIF, WebP (max 2MB), przechowywane w `public/uploads/avatars/`
- **Integracja LDAP** - synchronizacja danych z Active Directory

### Pattern Uploadów Avatarów
```php
// Walidacja uploadów
new File([
    'maxSize' => '2M',
    'mimeTypes' => ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
    'mimeTypesMessage' => 'Proszę wybrać prawidłowy plik obrazu (JPG, PNG, GIF, WebP)',
])

// Upload i cleanup
if ($avatarFile = $form->get('avatar')->getData()) {
    // Usuń stary avatar
    $oldAvatar = $user->getAvatar();
    if ($oldAvatar && file_exists($avatarPath . '/' . $oldAvatar)) {
        unlink($avatarPath . '/' . $oldAvatar);
    }
    
    // Zapisz nowy
    $fileName = 'avatar_' . $user->getId() . '_avatar.' . $avatarFile->guessExtension();
    $avatarFile->move($avatarPath, $fileName);
    $user->setAvatar($fileName);
}
```

## SYSTEM ZARZĄDZANIA BAZĄ DANYCH

### Funkcjonalności zarządzania bazą
- **📊 Informacje o bazie** - rozmiar, liczba tabel, wersja, szczegółowe statystyki tabel
- **💾 Kopie zapasowe** - automatyczne backupy przez mysqldump, lista i pobieranie backupów
- **⚡ Optymalizacja** - OPTIMIZE TABLE dla wszystkich tabel MySQL
- **🔍 Analiza** - ANALYZE TABLE dla aktualizacji statystyk indeksów  
- **🧹 Czyszczenie logów** - usuwanie starych plików logów (>30 dni)
- **📋 Monitoring** - szczegółowe informacje o tabelach (rozmiar danych/indeksów, liczba wierszy)

### Lokalizacja i dostęp
- **Route**: `/admin/settings/database`
- **Uprawnienia**: tylko rola `system_admin`
- **Katalog backupów**: `var/backups/` (automatycznie tworzony)
- **Format backupów**: `backup_[database]_[YYYY-mm-dd_HH-ii-ss].sql`

### Bezpieczeństwo backupów
```php
// Parsing DATABASE_URL z obsługą parametrów
if (preg_match('/mysql:\/\/([^:]+):([^@]+)@([^:]+):?(\d+)?\/([^?]+)(?:\?.*)?/', $databaseUrl, $matches)) {
    $database = $matches[5]; // Ignoruje parametry po znaku ?
}

// Komenda mysqldump z bezpiecznym escapowaniem
$command = sprintf(
    'mysqldump -h%s -P%s -u%s -p%s --single-transaction --routines --triggers %s > %s 2>&1',
    escapeshellarg($host), escapeshellarg($port), escapeshellarg($username),
    escapeshellarg($password), escapeshellarg($database), escapeshellarg($filepath)
);
```

### Walidacja backupów
```php
// Sprawdzanie rozmiaru i zawartości
if ($fileSize < 1000) { // Mniej niż 1KB = prawdopodobnie błąd
    throw new \Exception('Kopia zapasowa wydaje się niepełna');
}
```

### Struktura plików avatarów
```bash
public/uploads/avatars/
├── user_1_avatar.jpg    # avatar_{user_id}_avatar.{ext}
├── user_2_avatar.png
└── default/
    └── default-avatar.png  # domyślny avatar jeśli użytkownik nie ma własnego
```

### Form avatarów (src/Form/AvatarUploadType.php)
```php
->add('avatar', FileType::class, [
    'required' => false,
    'mapped' => false,
    'constraints' => [
        new File([
            'maxSize' => '2M',
            'mimeTypes' => ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
            'mimeTypesMessage' => 'Proszę wybrać prawidłowy plik obrazu (JPG, PNG, GIF, WebP)',
        ])
    ],
    'attr' => [
        'accept' => '.jpg,.jpeg,.png,.gif,.webp'
    ]
])
```

### Obsługa uploadów w kontrolerze
```php
// Upload nowego avataru
if ($avatarFile = $form->get('avatar')->getData()) {
    // Usunięcie starego avataru
    $oldAvatar = $user->getAvatar();
    if ($oldAvatar && file_exists($this->getParameter('avatars_directory') . '/' . $oldAvatar)) {
        unlink($this->getParameter('avatars_directory') . '/' . $oldAvatar);
    }
    
    // Zapisanie nowego
    $fileName = 'avatar_' . $user->getId() . '_avatar.' . $avatarFile->guessExtension();
    $avatarFile->move($this->getParameter('avatars_directory'), $fileName);
    $user->setAvatar($fileName);
}
```

### Wyświetlanie avatarów w szablonach
```twig
{# W topbar.html.twig #}
{% if app.user.avatar %}
    <img class="rounded-circle header-profile-user" 
         src="{{ asset('uploads/avatars/' ~ app.user.avatar) }}" 
         alt="Avatar">
{% else %}
    <img class="rounded-circle header-profile-user" 
         src="{{ asset('assets/images/users/avatar-1.jpg') }}" 
         alt="Default Avatar">
{% endif %}
```

## MIGRACJE BAZY DANYCH

### Migracje MySQL - kompatybilność
**Problem**: MySQL nie obsługuje `IF NOT EXISTS` w `ALTER TABLE ADD COLUMN`

**Rozwiązanie**: Użyj `INFORMATION_SCHEMA` do sprawdzenia istnienia kolumn:
```php
public function up(Schema $schema): void
{
    $connection = $this->connection;
    $databaseName = $connection->getDatabase();
    
    // Sprawdź czy kolumna istnieje
    $result = $connection->fetchOne(
        "SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
         WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'users' AND COLUMN_NAME = 'avatar'",
        [$databaseName]
    );
    if ($result == 0) {
        $this->addSql('ALTER TABLE users ADD avatar VARCHAR(255) DEFAULT NULL');
    }
}
```

### Przykład migracji z wieloma kolumnami
```php
// Zbierz wszystkie kolumny do dodania
$columnsToAdd = [];

// Sprawdź każdą kolumnę osobno
if ($this->columnNotExists('users', 'avatar', $connection, $databaseName)) {
    $columnsToAdd[] = 'ADD avatar VARCHAR(255) DEFAULT NULL';
}
if ($this->columnNotExists('users', 'branch', $connection, $databaseName)) {
    $columnsToAdd[] = 'ADD branch VARCHAR(100) DEFAULT NULL';
}

// Dodaj wszystkie kolumny jednym zapytaniem
if (!empty($columnsToAdd)) {
    $this->addSql('ALTER TABLE users ' . implode(', ', $columnsToAdd));
}
```

## KOMPATYBILNOŚĆ DOCTRINE DBAL

### Problem z getName() w nowszych wersjach
**Błąd**: `Attempted to call undefined method getName() of class Doctrine\DBAL\Platforms\MySQLPlatform`

**Rozwiązanie**: Zastąp `getName()` sprawdzaniem przez `instanceof`

```php
// BŁĘDNE (przestarzałe)
if ($connection->getDatabasePlatform()->getName() !== 'mysql') {
    // ...
}

// POPRAWNE (kompatybilne z nowszymi wersjami)
private function getDatabaseTypeName($platform): string
{
    if ($platform instanceof \Doctrine\DBAL\Platforms\MySQLPlatform) {
        return 'mysql';
    } elseif ($platform instanceof \Doctrine\DBAL\Platforms\PostgreSQLPlatform) {
        return 'postgresql';
    } elseif ($platform instanceof \Doctrine\DBAL\Platforms\SQLitePlatform) {
        return 'sqlite';
    }
    
    // Fallback przy użyciu refleksji
    $reflection = new \ReflectionClass($platform);
    return strtolower(str_replace('Platform', '', $reflection->getShortName()));
}

private function isMySQLPlatform($platform): bool
{
    return $platform instanceof \Doctrine\DBAL\Platforms\MySQLPlatform;
}
```

### MySQL INFORMATION_SCHEMA - problem z kluczami
**Błąd**: `Key "table_name" does not exist` (MySQL zwraca wielkie litery: `TABLE_NAME`)

**Rozwiązanie**: Normalizacja kluczy z fallback
```php
// Normalizuj klucze do małych liter
$tables = [];
foreach ($tablesResult as $row) {
    $tables[] = [
        'table_name' => $row['table_name'] ?? $row['TABLE_NAME'] ?? '',
        'table_rows' => $row['table_rows'] ?? $row['TABLE_ROWS'] ?? 0,
        // ...
    ];
}
```

## WZORCE FUNKCJONALNOŚCI

### Reset do Domyślnych Ustawień Pattern
```php
// Modal potwierdzenia z podglądem wartości
<div class="modal-body">
    <div class="text-start bg-light p-3 rounded mb-3">
        <ul class="mb-0 list-unstyled">
            <li><strong>Nazwa aplikacji:</strong> AssetHub</li>
            <li><strong>Główny kolor:</strong> <span class="badge" style="background-color: #405189; color: white;">#405189</span></li>
            <!-- ... inne wartości ... -->
        </ul>
    </div>
</div>

// Kontroler z CSRF protection i cleanup
public function resetGeneralSettings(Request $request): Response
{
    // CSRF validation
    if (!$this->isCsrfTokenValid('reset_general_settings', $request->request->get('_token'))) {
        $this->addFlash('error', 'Nieprawidłowy token bezpieczeństwa.');
        return $this->redirectToRoute('admin_settings_general');
    }
    
    // Reset wartości + cleanup plików
    $defaultSettings = [
        'app_name' => 'AssetHub',
        'primary_color' => '#405189',
        // ...
    ];
    
    // Usuń niestandardowe logo
    $currentLogo = $this->settingService->get('company_logo');
    if ($currentLogo && $currentLogo !== '/assets/images/logo-dark.png') {
        $logoPath = $this->getParameter('kernel.project_dir') . '/public' . $currentLogo;
        if (file_exists($logoPath) && strpos($currentLogo, '/uploads/logos/') !== false) {
            unlink($logoPath);
        }
    }
}
```

### Dual Color Input Pattern (Color Picker + HEX)
```javascript
// Synchronizacja dwukierunkowa
colorText.addEventListener('input', function() {
    const color = this.value;
    if (isValidHexColor(color)) {
        colorPreview.style.backgroundColor = color;
        // Sync z color picker przez wydarzenia
    }
});

// Inteligentna walidacja HEX
function normalizeHexColor(color) {
    color = color.trim();
    if (color && !color.startsWith('#')) {
        color = '#' + color;
    }
    // Rozszerz 3 znaki do 6
    if (/^#[0-9A-Fa-f]{3}$/.test(color)) {
        color = '#' + color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
    }
    return color;
}
```

## DODATKOWE WSKAZÓWKI

1. **Zawsze używaj transakcji** dla operacji na wielu tabelach
2. **Paginacja** - użyj KnpPaginatorBundle dla dużych zbiorów danych
3. **Cache** - używaj Symfony Cache dla często pobieranych danych
4. **API** - jeśli moduł ma API, używaj ApiPlatform
5. **Eventy** - używaj Symfony Events dla loose coupling
6. **Tłumaczenia** - przygotuj klucze dla Symfony Translator
7. **Pliki uploads** - zawsze sprawdzaj typ MIME i wielkość pliku
8. **MySQL migracje** - używaj INFORMATION_SCHEMA zamiast IF NOT EXISTS
9. **CSS Conflicts** - użyj CSS Variables + Direct Selectors z !important
10. **Color Inputs** - implementuj dual approach: picker + text field z synchronizacją
11. **Reset Functionality** - zawsze z modalem potwierdzenia i cleanup plików
12. **Dynamic CSS** - użyj ETag caching i response headers

## DEPLOYMENT

### Checklist przed deploymentem nowego modułu:
- [ ] Migracje bazy danych przetestowane
- [ ] Fixtures zaktualizowane
- [ ] Uprawnienia skonfigurowane
- [ ] Logowanie zaimplementowane
- [ ] Testy napisane i przechodzące
- [ ] Dokumentacja zaktualizowana
- [ ] Cache wyczyszczony na produkcji

---

Ten plik służy jako kompletny przewodnik dla generatorów AI przy rozwijaniu aplikacji AssetHub. Zawiera wszystkie konwencje, wzorce i wymagania niezbędne do prawidłowego dodawania nowych modułów.