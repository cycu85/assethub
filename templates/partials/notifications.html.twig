<!-- Notification dropdown content -->
<div class="dropdown topbar-head-dropdown ms-1 header-item" id="notificationDropdown">
    <button type="button" class="btn btn-icon btn-topbar btn-ghost-secondary rounded-circle" 
            id="page-header-notifications-dropdown" data-bs-toggle="dropdown" 
            data-bs-auto-close="outside" aria-haspopup="true" aria-expanded="false">
        <i class='bx bx-bell fs-22'></i>
        <span class="position-absolute topbar-badge fs-10 translate-middle badge rounded-pill bg-danger d-none" 
              id="notification-badge">0<span class="visually-hidden">nieprzeczytane powiadomienia</span></span>
    </button>
    <div class="dropdown-menu dropdown-menu-lg dropdown-menu-end p-0" aria-labelledby="page-header-notifications-dropdown" style="width: 380px; max-height: 500px;">

        <div class="dropdown-head bg-primary bg-pattern rounded-top">
            <div class="p-3">
                <div class="row align-items-center">
                    <div class="col">
                        <h6 class="m-0 fs-16 fw-semibold text-white">Powiadomienia</h6>
                    </div>
                    <div class="col-auto dropdown-tabs">
                        <span class="badge bg-light-subtle text-body fs-13" id="new-notifications-count">0 nowych</span>
                    </div>
                </div>
            </div>

            <div class="px-2 pt-2">
                <ul class="nav nav-tabs dropdown-tabs nav-tabs-custom" data-dropdown-tabs="true" id="notificationItemsTab" role="tablist">
                    <li class="nav-item waves-effect waves-light">
                        <a class="nav-link active" data-bs-toggle="tab" href="#all-noti-tab" role="tab" aria-selected="true" id="all-tab-link">
                            Wszystkie (<span id="all-count">0</span>)
                        </a>
                    </li>
                    <li class="nav-item waves-effect waves-light">
                        <a class="nav-link" data-bs-toggle="tab" href="#review-tab" role="tab" aria-selected="false">
                            Przeglądy
                        </a>
                    </li>
                    <li class="nav-item waves-effect waves-light">
                        <a class="nav-link" data-bs-toggle="tab" href="#transfer-tab" role="tab" aria-selected="false">
                            Przekazania
                        </a>
                    </li>
                </ul>
            </div>

        </div>

        <div class="tab-content position-relative" id="notificationItemsTabContent">
            <!-- All notifications tab -->
            <div class="tab-pane fade show active py-2 ps-2" id="all-noti-tab" role="tabpanel">
                <div data-simplebar style="max-height: 250px; overflow-y: auto;" class="pe-2" id="all-notifications-content">
                    <div class="text-center py-4" id="no-notifications">
                        <div class="avatar-md mx-auto mb-4">
                            <div class="avatar-title bg-primary-subtle text-primary fs-24 rounded-circle">
                                <i class="ri-notification-off-line"></i>
                            </div>
                        </div>
                        <p class="text-muted">Brak powiadomień</p>
                    </div>
                </div>

                <div class="my-3 text-center view-all d-none" id="view-all-section">
                    <button type="button" class="btn btn-soft-success waves-effect waves-light" onclick="notificationManager.markAllAsRead()">
                        <i class="ri-check-double-line align-middle"></i> Oznacz wszystkie jako przeczytane
                    </button>
                </div>
            </div>

            <!-- Review notifications tab -->
            <div class="tab-pane fade py-2 ps-2" id="review-tab" role="tabpanel">
                <div data-simplebar style="max-height: 250px; overflow-y: auto;" class="pe-2" id="review-notifications-content">
                    <div class="text-center py-4">
                        <div class="avatar-md mx-auto mb-4">
                            <div class="avatar-title bg-info-subtle text-info fs-24 rounded-circle">
                                <i class="ri-clipboard-line"></i>
                            </div>
                        </div>
                        <p class="text-muted">Brak powiadomień o przeglądach</p>
                    </div>
                </div>
            </div>

            <!-- Transfer notifications tab -->
            <div class="tab-pane fade py-2 ps-2" id="transfer-tab" role="tabpanel">
                <div data-simplebar style="max-height: 250px; overflow-y: auto;" class="pe-2" id="transfer-notifications-content">
                    <div class="text-center py-4">
                        <div class="avatar-md mx-auto mb-4">
                            <div class="avatar-title bg-success-subtle text-success fs-24 rounded-circle">
                                <i class="ri-arrow-left-right-line"></i>
                            </div>
                        </div>
                        <p class="text-muted">Brak powiadomień o przekazaniach</p>
                    </div>
                </div>
            </div>

            <div class="notification-actions d-none" id="notification-actions">
                <div class="d-flex text-muted justify-content-center">
                    Wybrano <div id="select-content" class="text-body fw-semibold px-1">0</div> powiadomień
                    <button type="button" class="btn btn-link link-danger p-0 ms-3" onclick="notificationManager.deleteSelected()">
                        Usuń
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Notification item template -->
<template id="notification-template">
    <div class="text-reset notification-item d-block dropdown-item position-relative" data-notification-id="" style="padding: 0.75rem 1rem;">
        <div class="d-flex align-items-start">
            <div class="avatar-xs me-3 flex-shrink-0">
                <span class="avatar-title rounded-circle fs-16 notification-icon">
                    <i class="notification-type-icon"></i>
                </span>
            </div>
            <div class="flex-grow-1 min-width-0">
                <div class="d-flex justify-content-between align-items-start mb-1">
                    <h6 class="mt-0 mb-1 lh-base notification-title fs-14 text-truncate" style="max-width: 200px;"></h6>
                    <div class="d-flex gap-1 ms-2">
                        <button class="btn btn-sm btn-ghost-danger notification-delete-btn" title="Usuń powiadomienie" style="padding: 0.125rem 0.25rem; font-size: 0.75rem;">
                            <i class="ri-close-line"></i>
                        </button>
                        <div class="form-check notification-check" style="margin: 0; padding: 0;">
                            <input class="form-check-input" type="checkbox" value="" style="margin: 0; width: 14px; height: 14px;">
                        </div>
                    </div>
                </div>
                <a href="#!" class="notification-link text-decoration-none">
                    <p class="notification-content mb-1 fs-13 text-muted text-truncate" style="max-width: 250px;"></p>
                </a>
                <p class="mb-0 fs-11 fw-medium text-uppercase text-muted">
                    <span><i class="mdi mdi-clock-outline"></i> <span class="notification-time"></span></span>
                </p>
            </div>
        </div>
    </div>
</template>

<!-- JavaScript for notifications -->
<script>
class NotificationManager {
    constructor() {
        this.notifications = [];
        this.unreadCount = 0;
        this.selectedNotifications = new Set();
        this.init();
    }

    init() {
        this.loadInitialCount();
        this.loadNotifications();
        this.setupEventListeners();
        // Refresh notifications every 30 seconds
        setInterval(() => this.loadNotifications(false), 30000);
    }

    async loadInitialCount() {
        try {
            console.log('Loading initial count...'); // Debug
            const response = await fetch('/api/notifications/count', {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                }
            });
            
            console.log('Count response status:', response.status); // Debug
            
            if (response.ok) {
                const data = await response.json();
                console.log('Count data:', data); // Debug
                
                if (!data.error) {
                    this.unreadCount = data.unread_count || 0;
                    this.updateBadge();
                }
            }
        } catch (error) {
            console.error('Error loading initial count:', error);
        }
    }

    setupEventListeners() {
        // Tab switching
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-bs-toggle="tab"]')) {
                const targetTab = e.target.getAttribute('href');
                if (targetTab === '#review-tab') {
                    this.loadCategoryNotifications('review');
                } else if (targetTab === '#transfer-tab') {
                    this.loadCategoryNotifications('transfer');
                }
            }
        });

        // Checkbox selection
        document.addEventListener('change', (e) => {
            if (e.target.matches('.notification-check input')) {
                this.updateSelection();
            }
        });

        // Mark as read on click
        document.addEventListener('click', (e) => {
            if (e.target.matches('.notification-link') || e.target.closest('.notification-link')) {
                e.preventDefault();
                const notificationItem = e.target.closest('[data-notification-id]');
                if (notificationItem) {
                    const notificationId = notificationItem.dataset.notificationId;
                    this.markAsRead(notificationId);
                    
                    // Navigate to action URL if exists
                    const notification = this.notifications.find(n => n.id == notificationId);
                    if (notification && notification.action_url) {
                        setTimeout(() => {
                            window.location.href = notification.action_url;
                        }, 100);
                    }
                }
            }
        });

        // Delete single notification
        document.addEventListener('click', (e) => {
            if (e.target.matches('.notification-delete-btn') || e.target.closest('.notification-delete-btn')) {
                e.preventDefault();
                e.stopPropagation();
                const notificationItem = e.target.closest('[data-notification-id]');
                if (notificationItem) {
                    const notificationId = notificationItem.dataset.notificationId;
                    this.deleteSingle(notificationId);
                }
            }
        });
    }

    async loadNotifications(showLoading = true) {
        try {
            console.log('Loading notifications...'); // Debug
            const response = await fetch('/api/notifications', {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                }
            });
            
            console.log('Response status:', response.status); // Debug
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('Loaded notifications:', data); // Debug
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            this.notifications = data.notifications || [];
            this.unreadCount = data.unread_count || 0;
            
            this.updateUI();
        } catch (error) {
            console.error('Error loading notifications:', error);
            
            // Try to get unread count at least
            if (this.unreadCount === 0) {
                this.loadInitialCount();
            }
            
            // Show error in UI
            this.showError('Błąd podczas ładowania powiadomień');
        }
    }

    async loadCategoryNotifications(category) {
        try {
            const response = await fetch(`/api/notifications?category=${category}`);
            const data = await response.json();
            
            this.renderCategoryNotifications(category, data.notifications);
        } catch (error) {
            console.error('Error loading category notifications:', error);
        }
    }

    updateUI() {
        this.updateBadge();
        this.updateCounts();
        this.renderNotifications();
    }

    updateBadge() {
        const badge = document.getElementById('notification-badge');
        const newCountSpan = document.getElementById('new-notifications-count');
        
        if (this.unreadCount > 0) {
            badge.textContent = this.unreadCount;
            badge.classList.remove('d-none');
            newCountSpan.textContent = `${this.unreadCount} nowych`;
        } else {
            badge.classList.add('d-none');
            newCountSpan.textContent = '0 nowych';
        }
    }

    updateCounts() {
        document.getElementById('all-count').textContent = this.notifications.length;
    }

    renderNotifications() {
        const container = document.getElementById('all-notifications-content');
        const noNotifications = document.getElementById('no-notifications');
        const viewAllSection = document.getElementById('view-all-section');
        
        // Remove any theme-generated empty notification elements
        container.querySelectorAll('.empty-notification-elem').forEach(elem => elem.remove());
        
        if (this.notifications.length === 0) {
            noNotifications.classList.remove('d-none');
            viewAllSection.classList.add('d-none');
            return;
        }

        noNotifications.classList.add('d-none');
        viewAllSection.classList.remove('d-none');
        
        // Clear existing notifications except template
        const existingNotifications = container.querySelectorAll('.notification-item');
        existingNotifications.forEach(item => item.remove());

        // Add notifications
        this.notifications.forEach(notification => {
            const notificationElement = this.createNotificationElement(notification);
            container.appendChild(notificationElement);
        });
    }

    renderCategoryNotifications(category, notifications) {
        const containerId = `${category}-notifications-content`;
        const container = document.getElementById(containerId);
        if (!container) return;

        // Clear existing content
        container.innerHTML = '';

        if (notifications.length === 0) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="avatar-md mx-auto mb-4">
                        <div class="avatar-title bg-info-subtle text-info fs-24 rounded-circle">
                            <i class="ri-${category === 'review' ? 'clipboard' : 'arrow-left-right'}-line"></i>
                        </div>
                    </div>
                    <p class="text-muted">Brak powiadomień o ${category === 'review' ? 'przeglądach' : 'przekazaniach'}</p>
                </div>
            `;
            return;
        }

        notifications.forEach(notification => {
            const notificationElement = this.createNotificationElement(notification);
            container.appendChild(notificationElement);
        });
    }

    createNotificationElement(notification) {
        const template = document.getElementById('notification-template');
        const element = template.content.cloneNode(true);
        
        const item = element.querySelector('.notification-item');
        item.dataset.notificationId = notification.id;
        
        // Set icon and color
        const icon = element.querySelector('.notification-type-icon');
        const iconContainer = element.querySelector('.notification-icon');
        icon.className = `notification-type-icon ${notification.type_icon}`;
        iconContainer.className += ` bg-${notification.type_color}-subtle text-${notification.type_color}`;
        
        // Set content
        element.querySelector('.notification-title').textContent = notification.title;
        element.querySelector('.notification-content').textContent = notification.content;
        element.querySelector('.notification-time').textContent = notification.time_ago;
        
        // Set link
        const link = element.querySelector('.notification-link');
        if (notification.action_url) {
            link.href = notification.action_url;
        }
        
        // Set checkbox
        const checkbox = element.querySelector('.notification-check input');
        checkbox.value = notification.id;
        checkbox.id = `notification-check-${notification.id}`;
        
        const label = element.querySelector('.notification-check label');
        label.setAttribute('for', `notification-check-${notification.id}`);
        
        // Add unread styling
        if (!notification.is_read) {
            item.classList.add('unread');
            item.style.backgroundColor = 'rgba(13, 110, 253, 0.05)';
        }
        
        return element;
    }

    async markAsRead(notificationId) {
        try {
            await fetch(`/api/notifications/${notificationId}/read`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            // Update local state
            const notification = this.notifications.find(n => n.id == notificationId);
            if (notification) {
                notification.is_read = true;
                this.unreadCount = Math.max(0, this.unreadCount - 1);
                this.updateBadge();
            }
            
            // Update UI
            const element = document.querySelector(`[data-notification-id="${notificationId}"]`);
            if (element) {
                element.classList.remove('unread');
                element.style.backgroundColor = '';
            }
        } catch (error) {
            console.error('Error marking notification as read:', error);
        }
    }

    async markAllAsRead() {
        try {
            await fetch('/api/notifications/mark-all-read', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            // Update local state
            this.notifications.forEach(n => n.is_read = true);
            this.unreadCount = 0;
            
            // Update UI
            this.updateBadge();
            document.querySelectorAll('.notification-item.unread').forEach(element => {
                element.classList.remove('unread');
                element.style.backgroundColor = '';
            });
        } catch (error) {
            console.error('Error marking all notifications as read:', error);
        }
    }

    updateSelection() {
        const checkboxes = document.querySelectorAll('.notification-check input:checked');
        this.selectedNotifications.clear();
        
        checkboxes.forEach(checkbox => {
            this.selectedNotifications.add(checkbox.value);
        });
        
        const actionsDiv = document.getElementById('notification-actions');
        const selectContent = document.getElementById('select-content');
        
        if (this.selectedNotifications.size > 0) {
            actionsDiv.classList.remove('d-none');
            selectContent.textContent = this.selectedNotifications.size;
        } else {
            actionsDiv.classList.add('d-none');
        }
    }

    async deleteSingle(notificationId) {
        try {
            await fetch(`/api/notifications/${notificationId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            // Remove from UI with animation
            const element = document.querySelector(`[data-notification-id="${notificationId}"]`);
            if (element) {
                element.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                element.style.opacity = '0';
                element.style.transform = 'translateX(100%)';
                
                setTimeout(() => {
                    element.remove();
                    this.checkIfEmpty();
                }, 300);
            }
            
            // Update local state
            this.notifications = this.notifications.filter(n => n.id != notificationId);
            this.updateUI();
        } catch (error) {
            console.error('Error deleting notification:', error);
        }
    }

    async deleteSelected() {
        if (this.selectedNotifications.size === 0) return;
        
        try {
            await fetch('/api/notifications/delete-multiple', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    notification_ids: Array.from(this.selectedNotifications)
                })
            });
            
            // Remove from UI
            this.selectedNotifications.forEach(id => {
                const element = document.querySelector(`[data-notification-id="${id}"]`);
                if (element) {
                    element.style.transition = 'opacity 0.3s ease';
                    element.style.opacity = '0';
                    setTimeout(() => element.remove(), 300);
                }
            });
            
            // Update local state
            this.notifications = this.notifications.filter(n => 
                !this.selectedNotifications.has(n.id.toString())
            );
            
            this.selectedNotifications.clear();
            setTimeout(() => {
                this.updateUI();
                this.checkIfEmpty();
            }, 300);
        } catch (error) {
            console.error('Error deleting notifications:', error);
        }
    }

    checkIfEmpty() {
        const containers = ['all-notifications-content', 'review-notifications-content', 'transfer-notifications-content'];
        
        containers.forEach(containerId => {
            const container = document.getElementById(containerId);
            if (container && container.querySelectorAll('.notification-item').length === 0) {
                const emptyMessage = container.querySelector('.text-center');
                if (!emptyMessage) {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <div class="avatar-md mx-auto mb-4">
                                <div class="avatar-title bg-primary-subtle text-primary fs-24 rounded-circle">
                                    <i class="ri-notification-off-line"></i>
                                </div>
                            </div>
                            <p class="text-muted">Brak powiadomień</p>
                        </div>
                    `;
                }
            }
        });
    }

    showError(message) {
        const container = document.getElementById('all-notifications-content');
        if (container) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="avatar-md mx-auto mb-4">
                        <div class="avatar-title bg-danger-subtle text-danger fs-24 rounded-circle">
                            <i class="ri-error-warning-line"></i>
                        </div>
                    </div>
                    <p class="text-muted">${message}</p>
                    <button class="btn btn-sm btn-outline-primary" onclick="notificationManager.loadNotifications()">
                        <i class="ri-refresh-line me-1"></i>Spróbuj ponownie
                    </button>
                </div>
            `;
        }
    }
}

// Disable theme's notification system
window.emptyNotification = function() {
    // Do nothing - our system handles this
};

// Initialize notification manager when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Remove any theme-generated empty notifications first
    document.querySelectorAll('.empty-notification-elem').forEach(elem => elem.remove());
    
    window.notificationManager = new NotificationManager();
});
</script>

<style>
/* Notification dropdown improvements */
.notification-item {
    border-bottom: 1px solid #f0f0f0;
    transition: all 0.2s ease;
    word-wrap: break-word;
}

.notification-item:last-child {
    border-bottom: none;
}

.notification-item:hover {
    background-color: #f8f9fa;
}

.notification-item.unread {
    background-color: rgba(13, 110, 253, 0.05);
    border-left: 3px solid #0d6efd;
}

.notification-delete-btn {
    opacity: 0;
    transition: opacity 0.2s ease;
    background: none;
    border: none;
    color: #dc3545;
    min-width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.notification-item:hover .notification-delete-btn {
    opacity: 1;
}

.notification-delete-btn:hover {
    background-color: #dc3545;
    color: white;
    border-radius: 3px;
}

.notification-title {
    font-weight: 600;
    color: #495057;
    margin-bottom: 0.25rem;
    line-height: 1.3;
}

.notification-content {
    line-height: 1.4;
}

.notification-link:hover .notification-title {
    color: #0d6efd;
}

/* Fix dropdown positioning */
.dropdown-menu-lg {
    min-width: 380px;
    max-width: 400px;
}

/* Scrollbar styling */
[data-simplebar] .simplebar-scrollbar:before {
    background: #6c757d;
    opacity: 0.3;
    border-radius: 3px;
}

[data-simplebar] .simplebar-track.simplebar-vertical {
    width: 6px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .dropdown-menu-lg {
        min-width: 320px;
        max-width: 90vw;
        margin-right: 10px;
    }
    
    .notification-title {
        font-size: 0.8rem;
        max-width: 180px;
    }
    
    .notification-content {
        font-size: 0.75rem;
        max-width: 220px;
    }
}

/* Animation improvements */
.notification-item {
    transform: translateX(0);
    transition: opacity 0.3s ease, transform 0.3s ease, background-color 0.2s ease;
}

/* Badge improvements */
.topbar-badge {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        transform: translate(-50%, -50%) scale(1);
    }
    50% {
        transform: translate(-50%, -50%) scale(1.1);
    }
    100% {
        transform: translate(-50%, -50%) scale(1);
    }
}

/* Tab content height fix */
.tab-content {
    min-height: 200px;
}

/* Loading state */
.notification-loading {
    opacity: 0.6;
    pointer-events: none;
}

/* Empty state styling */
.text-center .avatar-title {
    animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
    from { opacity: 0; transform: scale(0.8); }
    to { opacity: 1; transform: scale(1); }
}
</style>